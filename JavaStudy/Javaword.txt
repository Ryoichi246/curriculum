■Java11とJava8
・型推論ができるようになった。変数の型を宣言せずに様々な型の変数を扱える機能。
・_を変数名に使用できなくなった。
・モヂュールがある。
・ほかにも諸々ある。

■ 開発

・ウォーターフォール開発
SIerなどシステム開発の現場でよく用いられる。
ウォーターフォール型開発とは、開発現場でよく用いられる手法で、
開発手順を1つずつ確認しながら工程を進めていく手法のこと。
開発を各工程に分けて進めるが、次のフェーズに進んでしまうと後戻りができない手法でもある。
開発担当者や責任者、クライアントが各工程の成果物をともに確認し、双方の合意を得たうえで、
各工程を完成とする。つまり責任はある程度分散されているようである。欠陥がある時点でおじゃんに
なるので非常に慎重な開発体制。

・アジャイル開発
クライアントの要望に応えるシステムをできるだけ素早くリリースしようという考えに基づいている
開発手法。クライアントのビジネスの始動を早めようという目的がある。
リリースを早くするには、搭載する機能を最低限の状況にする方法がとられるケースが多い。アジャイル
型開発では、開発メンバーがシステムにおける優先度に順位をつけ短い期間での納品を目指して動く。
スクラム組んですすめていく。

・マイグレーション
ソフトウェアやシステム、データなどを別の環境に移転したり、新しい環境に切り替えたりすること。

・デグレーション
作ったはずの機能がなくなっちゃったり、直したはずのバグ（不具合）が復活したりといった「プログラムを変更したら、
前よりおかしくなっちゃった」な状態。

・デプロイ
開発した機能やサービスを利用できる状態にする作業を指す語として用いられる。

・コンフリクト
複数の装置やプログラムが同じ資源を利用しようとして競合状態になること。

・環境
ある装置やソフトウェアにとって、それが導入されるコンピュータのハードウェアの構成や設定、
OSなどソフトウェアの構成や設定、および、それら全体の組み合わせのこと。

・開発環境（ローカル）
実際にサーバーにあげる前にサイトの動作や表示確認を手持ちのパソコン内で行うこと。または
行う場所(概念的)。ブラウザでlocalhost:(ポート番号)を開くことによってページとして開くことができる。

・検証環境（ステージング）
本番環境に限りなく近い検証環境の最終段階の事。テスト環境で作動していても本番環境で
不具合が発生することはすくなくない。ステージング環境があれば。リリース後に不具合が発生する
リスクを抑えられる。

・本番環境
出来上がった製品を実際に稼働させて利用に供するための施設や機材、ソフトウェアなどの組み合わせた
運用環境の事。

・設計書／仕様書
設計内容をまとめた資料の事。PMなどが書いている。これをもとに下流が実際に書いていく。

・要件定義
システム開発などのプロジェクトを始める前の段階で、必要な機能や要求をわかりやすくまとめていく作業

・基本設計書
これは開発担当者がクライアント担当者にヒアリングした内容をもとにソフトウェアに必要な機能等を盛り込んだ資料

・詳細設計書
詳細設計ではクライアントを意識せずに社内開発者が、開発向けに作った設計書。

・テスト
製品やプログラムが小堤通りに動くかどうかをチェックしていく作業。

・単体テスト（UT）
部品単体で想定通りの動きをするかどうかをチェックしていく。

・結合テスト（CT／IT）
複数のモジュールを結合したときに正しく機能するかを確かめるテストで、
主にモジュール間の接続点（インターフェース）がうまく機能するかを確認する場合と、
結合した状態で外部から見て一体として正しく機能するかを確認する場合がある。

・総合テスト（ST）
システム開発におけるプログラムの検証作業の中でも、
構築したシステムが全体として予定通りの機能を満たしているかどうかを確認するテストのことである。
開発者側の最終テスト

・エビデンス／証跡
システム開発のテスト工程などで、システムが正しく動作している、
あるいは不具合が生じたことを示す証拠となる書類やデータなど。

・データパッチ
ソフトウェアを構成するプログラムやデータを更新・修正するために、
新しい版との相違点（差分）を抜き出したデータ

・Access
機器やソフトウェア、システム、
情報などを利用（操作、取得、閲覧、読み書きなど）可能な状態にすること

・マクロ
複数の機能をまとめて呼び出す機能。業務を自動化したりなにかと時短できる。

・VBA
マイクロソフトが開発した、Microsoft Office製品で動くプログラムを作るためのプログラム言語。
プログラムの元ネタを書くときに使う言葉(プログラム言語)の一つ

・GAS（Google Apps Script）
Googleが開発・提供しているプログラミング言語。
JavaScriptというWebブラウザ上で動作するプログラミング言語をベースに作成されている。
Googleのツールの機能の拡張ができる。

・API
アプリケーションやソフトウェアの構築と統合 (インテグレーション) に使われるツール、定義、プロトコル。
Application Programming Interface。

・WEB API
広義にはHTTPプロトコルを用いてネットワーク越しに呼び出すアプリケーション間、システム間のインターフェース。

・REST API
REST(REpresentational State Transfer)はWebサービスの設計モデル
RESTなWebサービスは、そのサービスのURIにHTTPメソッドでアクセスすることでデータの送受信を行う。

・SOAP
異なるコンピュータ上で動作するプログラム同士がネットワークを通じてメッセージを伝え合い、
連携して動作するための通信プロトコル（規約）の一つ。
メッセージの記述にXMLを、データ伝送に主にHTTPを用い、Webサービスの提供や利用に適しているとされる。

・Ajax
あるWebページを表示した状態のまま、別のページや再読込などを伴わずにWebサーバ側と通信を行い、
動的に表示内容を変更する手法。

・XML
文章の見た目や構造を記述するためのマークアップ言語の一種。
主にデータのやり取りや管理を簡単にする目的で使われ、記述形式がわかりやすいという特徴がある。

・JSON
JavaScriptのオブジェクト記述を用いたデータ交換フォーマット。
Python、PHP、JavaScript、C++、Javaなど様々な言語でサポートされており、
JSONを間に挟むことで各プログラミング言語間のデータの受け渡しがとても簡単にできる。

・ステータスコード
HTMLを表示する前にブラウザが発振する3桁の番号。番号は100-510までの間で割り振られていて、
各数値にはそれぞれの意味が付与されている。この3桁の数値をHTMLを受信する前に受信することで、
ブラウザは正しい処理ができるようになる。

・クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）
オリジン間リソース共有。
オリジンOは、ウェブコンテンツにアクセスするために使われる URLのスキーム(プロトコル)、
ホスト(ドメイン)、ポートによって定義される。
 (CORS) は、追加の HTTP ヘッダーを使用して、あるオリジンで動作しているウェブアプリケーションに、
異なるオリジンにある選択されたリソースへのアクセス権を与えるようブラウザーに指示するための仕組み。

・バリデーション
入力内容や記述内容が要件を満たしているか、妥当性を確認すること。

・データ連携
企業内外の様々なシステムやアプリケーションのデータをつないで、有効活用するためのしくみや
プロセスのこと。

・Daemon
UNIX系OSでメインメモリ上に常駐して特定の機能を提供するプログラム、
利用者の操作とは無関係に処理を行うバックグラウンドプロセスの一種で、
別のプログラムや機器、通信相手など外部からの要求を受けつけて処理を
実行したり、あらかじめ設定されたタイミングで自律的に特定の処理を
実行したりする。
OS起動時に実行状態となる。

かみ砕いていうと、メモリ上で常駐しているプログラムのＵＮＩＸ系ＯＳにおける呼び名。


・CRON(クローン)
ユニックス常駐プログラム(daemon)の一種。利用者の設定したスケジュールに従って指定された
プログラムを定期的に起動してくれるもの。

・バッチ
ひとまとまりの事を指す。一気に操作する作業自体の事を指す。

・ログ
コンピュータの利用状況やデータ通信など履歴や情報の記録をとること、またその記録を指す。
操作やデータの送受信が行われた日時と、行われた操作の内容や送受信されたデータの中身などが
記録される。

・CSV
Comma Separated Value（＝カンマ（,）で区切った値。
半角カンマ（,）の記号を使ってデータの構成要素単位（フィールド）の区切りを示すデータ形式。
CSVファイルは互換性が高く、Excelのみならずほとんどのソフトに取り込んで閲覧、編集することが
できる。なので、相手がエクセルを扱えるかが微妙な時はCSVファイルを送るのが安全。
表計算データをオープンソースで配布するときなどにも用いられる。
汎用性の高いcsvファイルをExcelに取り込むときは、
〇数字列の頭から続く0が消えてしまう
例「001」→「1」
〇数列や番地が日付に変換されてしまう
例「2019-5-1」「港区2-3-4」といった数列や番地の記述が「2019/5/1」「港区2002/3/4」
〇「年/月」形式の記述が「英語の月名-年の下二桁」に変換されてしまう
例「2019/5」→「Jun-19」
〇カッコつきの数がマイナスに変換されてしまう
例「(1)」などカッコつきの文字が「-1」に変換されてしまう現象です。
（余談）
拡張子.xlsxのエクセルファイルはCSVファイルと比べて互換性に劣る。しかしそのかわり装飾
機能の自由度がCSVファイルよりはるかに高く、セルに色を付けたり票をグラフにしたり文字の
フォントを指定したりできる。

・TSV
テキストデータ。各項目がタブで区切られている。
CSVのたぶばんだｄと


・プルリクエスト（マージリクエスト）
コードの変更をレビュアー(レビュー・マージ担当の人)に通知し、マージを依頼する機能。
コードのレビューを受けることで、一人で作ると気が付かないコードの指摘やバグや記述ミスの
発見ができ、コードの品質を高める。
マージとは結合するとか統合するとかそんな感じの意味。

簡単に言うと、開発者のローカルリポジトリでの変更を他の開発者に通知する機能。
ソースコードの変更箇所をわかりやすく表示してくれる。
ソースコードに関するコミュニケーションの場を提供する。
ほとんどの主要なGitホスティングサービスやツールで利用できる。



■ チケット管理ツール

・asana
イベントやキャンペーンに携わるチームメンバーの日々の仕事をサポートするためのワークマネジメント
ツール。かみ砕いていうと、チームの動きをみえるかするツール。
組織とチームメンバー、プロジェクト、タスクが層を成して構成されており、
それぞれのプロジェクトやタスクにはチャット等でコミュニケーションをする機能がある。

・Backlog
タスクをただ管理するだけでなく、グラフ化して分析するための材料を用意する。。
責任の所在がはっきりしないタスクがあるという状況によく陥るチームにこそにオススメなツールらしい。

・Jooto
個人でタスク管理するには十分らしい。UIも見やすく使える機能も充実している。
しかしチームで使う場合は少々割高とのこと。
カンバン形式らしくドラック＆ドロップでタスクを管理できる。

・Readmine
無料で利用できる。オープンソースソフトウェア。
数多あるプロジェクト管理ツールの中で、日本国内のエンジニアから高い人気を集めている。
日本国内では人気。なお世界的にはJiraが人気である。
チケット管理・PMツール利用者の7割はRedmineを選択


・Trello
利用者数が世界で2000万人と業界では一番多く利用されている。
無料ですべての機能を使えることがかなりのアドバンデージ。費用対効果が高いのが特徴。
機能面では他のツールに劣る。

■ バージョン管理
一言でいうと成果物の変更を管理すること。成果物、ドキュメント類の変更を管理することは、
複数人で作業を進める上で全体の作業効率を向上することに起因する。
複数の作業者があるひとつのエクセルファイルを同時に編集して競合コピーが発生してしまったなど、
複数の作業者内でのドキュメントの変更・編集による障害を防止するのもバージョン管理システムの役割の
一つになる。
成果物は時間がたつにつれて変化、あるいは進化していくもので、変化の過程に追従していくことは
重要である。ながながとうんちくを垂れ流したが、要するに
〇ファイルの共有
〇ファイルの同期
〇ファイルのバックアップ
の三つがバージョン管理ツールに主に必要な機能である。
そしてそのバージョン管理システムには二種類ある

・集中型(中央集中)
複数の作業者が同じファイル群を扱うものとする。ある一つのサーバーで中央集中型システムは稼働し、
誰でもそのサーバからファイルのコピーを取得して作業ができる。
変更した内容はサーバにある内容に反映に(コミット)できる。
また、他の利用者が更新操作をおこなったことにより、サーバ内のファイルが変更されると、
その内容も自分の環境に同期できる。ここでサーバ内にあるファイル群の事をリポジトリと呼ぶ。
サーバ側ではすべての変更内容を記録しているので、この記録をもとにどんな変更でも前の状態に
戻すことができたり、変更したときに何が行われたかわかることができる。
変更をサーバに保存するとリビジョン番号というものが生成・増加される。リビジョン番号は
書類で例えると、改訂版の番号にあたるもので変更を認識するシンボル的な物である。
デメリットとしては、オフラインの状態では最新のファイルをリポジトリに取得・反映することができない。

・分散型
集中型と違って主となるサーバーをもっていない。その代わりに誰もが独立したリポジトリをもっている。
他のリポジトリと同期することができる。中央集中型ではリポジトリを用意することができるのは
一つのサーバーだけであった。それに対し分散型は複数のリポジトリを持つことができるのである。
中央集中型のようにある一つのサーバーに(中央サーバーと便宜上呼ぶがあしからず)リポジトリを
おき、中央サーバーから複数の作業者がリポジトリを
①ローカルにコピー(プルと呼ぶ)
②変更
③中央サーバーに反映(プッシュ)という流れは分散型にもある。
しかしこの分散型における中央サーバーの目的は中央集中型のものとは異なる。そのうえこの流れは
中央集中型と同じ使い方であり、分散型のよい点を生かし切れていない。
分散型における中央サーバーの目的は、すべての作業者、開発者が個々の変更を単一の場所で共有・集約
する場所となり、開発者のリポジトリ間でpullやpushをする代わりに使われる。
つまり、すべての作業者それぞれのリポジトリにおけるすべての変更を追うためのバックアップ
につながる。
分散型の管理システムでは、中央リポジトリでファイルを共有するために中央集中型とは異なるアプローチ
が可能。複数のリポジトリを一つのサーバに用意して、それぞれ異なるLevelでアクセスする方法である。
複数のリポジトリには開発版、安定板、リリーズリポジトリなどがある。
全てのリポジトリで共通かつ一貫したリビジョン番号というものが存在しない。タグによって
バージョンの認識をわかりやすくしている。

・Github
世界中の人間がプログラムコードやデザインデータを保存・管理できる。ソースコード管理サービス。
使えることが前提という感じになってきているので頑張って覚えなくてはという感じ。
なお、ホームページなどをサーバを立てることなしで公開する機能などもある、ソースコードが
公開されてしまうのがあれではある。

・Backlog
タスクをただ管理するだけでなく、グラフ化して分析するための材料を用意する。。
責任の所在がはっきりしないタスクがあるという状況によく陥るチームにこそにオススメなツールらしい。

・SourceTree
Atlassian社が提供するGitの分散管理システムツール操作を効率的に扱うGUIで、
GUIとはユーザー画面上で視覚的に操作ができる機能。誰がいつどのようなプログラムを書いたのか、
修正や追加をした場合も視覚的に確認できる。

・Tortoise SVN
Subversion (SVN)のクライアントで、Windowsのシェルエクステンションとして機能します。
Subversionのコマンドを実行する必要がなく、直観的に、簡単に使えます。バージョン管理をするためのツール。

・Git Flow
プラグインツールのこと。
Vincent Driessen氏がブログに書いた"A successful Git branching model" 
というブランチモデルの導入を簡単にする git プラグインである。

・master
同種のものが複数ある場合に優先されるもの。
データ管理の文脈では、複製や加工などが行われる前の、もとになる正規データのことを
マスターデータ、マスターファイルなどと呼び、これを略してマスターという。
ハードウェアの制御において、複数ある同種の危機の中で制御する側の機器をマスターという。

・release
納品の事。客に収める事。システム屋的には客に収める事＝リリースなので、実際に使われるかどうかは
別の話。

・develop
開発。

・feature
ソフトウェアのアジャイル開発プロセスで、利用者の観点から見たソフトウェアやシステムを持つ
機能・特徴のことをフィーチャーということがある。


■ FW／ライブラリ

・FW
フレームウェアの事。フレームウェアとはコンピュータや電子機器などに内蔵されるソフトウェアの
本体内部の回路や装置などの基本的な制御を司る機能を持ったもの。

・Spring Framework
Javaの開発環境で使用できるオープンソースフレームワーク。
企業やエンジニアによっては縮めてSpringと呼ばれてる。とにかく人気。
特徴として、AOPとDIDと呼ばれる概念で構築されていること、専用のテストプログラムがあること
などがあげらる。
AOPとはAspect Orientation Programmingの略で、日本語ではアスペクト指向プログラミング
と訳されている。簡単に表現すれば、システム内で行われている同じ処理(共通処理)を抽出して
集約するプログラミング手法で、プログラムをシンプルにまとめることができる。
コードを短くわかりやすくすることで、不具合の特定が容易になるほか、プログラムの修正も
おこないやすくなる。
DIとはDependency Injectionの略で、日本語では依存性の注入と訳される。例えば、
二つのクラスが存在していて、両方のクラスが依存関係にある場合、一方が未完成だと
動作テストを行うことができない。しかし、Spring Frameworkを使用して、オブジェクトを
注入することにより、クラスの依存関係が解消されて、動作のテストを行える。結果として、
一つ一つのプログラムを独立させやすくなり、システムの開発や改修が楽になる。

・Struts
Apache Software Foundationによって開発されているオープンソースのWebアプリケーションフレームワーク。
MVCにいよってJavaServletAPIやJspなどを用いたサーバーサイドのWebアプリケーションを構築することが
できる。
あらかじめ整備されたJSPのライブラリが多数用意されており、比較的簡便でミスも紛れ込みにくくなっている。

・JSF（Java Server Faces）
JSFとは、JavaEEに搭載されたJava言語におけるフレームワークの一種。
JSFを利用することで簡単にWEBアプリケーションのインターフェースが作成可能となる。
JSFは自分でプログラムするのではなく、ツールによるWEbアプリケーションの作成を意識している。
Javaの環境で使用できるフレームワークには、このほかにも「Play Framework」「Wicket」
などがある。
Jspとしばしば混同される。JSPはアクセスを要求されるとプログラムが実行される。
JSFよりも細かい分岐選択が可能。しかし、1つのページの中にHTMLとJSPタグによるプログラムの記載があるため、
見る人によっては未整理で雑然とした印象を受ける。そこで、「もっときれいにデザインと処理を分けて作りたい」
という人のために登場したフレームワークのひとつがJSFなのである。
端的に言えば、JSPの欠点を改良して誕生したのが、フレームワークのJSFという認識でよい。

・ライブラリ
よく使う複数のプログラムを再利用できるようにひとまとまりにしたもの。Javaではクラスライブラリと
呼ぶ。JavaではライブラリをJARファイルで提供することが多い。Jarファイルはコンパイルの際に作成される
classファイルを一つに集めて圧縮したファイルです。またこのJARファイルは自分で作ることもできる。

・Bootstrap
独学でHTML/CSSを勉強してもデザインがいまいち...というときに便利なのがBootstrap。
twitter社が開発したCSSの『フレームワーク』。通常CSSを書くときはすべてのスタイルを自分で作っていく
必要がある。しかし、このフレームワークにはよく使われるスタイルがあらかじめ定義してあるので、
ルールに沿って利用するだけでも整ったデザインのページが作成できる。
もともとはTwitter社内で使われていた。

・Flyway
オープンソースのデータベースマイグレーションツール。
Flywayを使うことで、データべースの状態を管理できるようになる。
データベースを使っていると
〇あるデータベースの、現在の状況がわからない。
〇あるバッチ用SQLがデータベースに既に適用されているかわからない。
〇本番環境で緊急対応が必要になり適用したバッチが、テスト環境にも反映されているかわからない。
〇新しいデータベース環境を作成するときに、どのSQLwo、どの順番で実行すればいいのかわからない。
そんな時に、 Flyway のようなデータベースをバージョン管理するツールがあると便利。
パッチを適用したかどうかは、 Flyway が管理しているし、簡単に確認できる。
新しいデータベース環境も、 Flyway を実行すれば簡単に作成できる。

・Jackson
Jackson(ジャクソン)は、JSON形式のデータを処理するための高速かつ軽量なJavaライブラリ。
「Jackson Java JSON-processor」とも呼ばれいる。

・jQuery
JavaScriptの書き方などを簡単にすることができる、JavaScriptで作成されたライブラリ。
ブラウザの互換性に優れており、ブラウザの違いを意識することなく制作ができる。

・Junit
Javaで書かれたプログラムのテストを自動化するためのツール。


・Log4j
Log4J は Jakarta プロジェクトで開発が進められている Java プログラム用のログAPI。


・Lombok
java言語におけるポイラープレートコードをソースコードから排除するために使用するライブラリである。
ボイラ―プレートコードとは、言語使用上省くことができない定型的なコードの事。
ボイラ―プレートコードは本質的なロジックではないため、アプリケーションを実装するうえで冗長なコードとなる。
ゲッターセッターメソッド、toStringメソッド、コンストラクタ、ewuals/hashCodeなどなど


・ORM
データベースとオブジェクト指向プログラミング言語の間の非互換なデータを変換するプログラミング技法。
かみ砕いていうと、オブジェクト指向と関係データベースの考え方を上手く変換してつないでくれるもの。


■ 連絡ツール

・ChatWork
多機能チャットツール。主にビジネスの場で使用されている。
メールの代わりとなるチャットが使えるだけでなく、pdf,画像ファイルの送信など、様々なビジネスシチュエーション
でつかうことができる。

・Slack
ビジネス用のメッセージングアプリ。検索機能の絞り込み条件設定が豊富。ファイル共有が簡単。

・IP Messenger
プロトコルにTCP/IPを利用するメッセンジャーソフト。タスクトレイのアイコンをダブルクリックすると現れる
ウィンドウに、LAN内で「IP Messenger」を使用中のユーザがリスト表示され、リストから相手を選択してメッセージを送信する。
また、IPアドレスを直接指定することで、インターネット上のユーザーとメッセージの送受信をすることも可能。


■ Java

・Javadoc
プログラムについて説明するドキュメントをソースコードに埋め込むためのもの。
ソースコードの内容から自動判定したり特定の書式で書かれたコメントを抜き出すことによって自動生成された、
ホームページっぽい形式になっているJavaのソースコードの説明書。またはその説明書を作る時に使う
コマンドの事。
/**
* Javadocのテスト用クラス
* @author　ピヨ太
* @version　1.0
*/
public class JavadocTest{
これのメモ部分。

・アノテーション
注釈を意味する言葉で、Javaをかくときに大切な情報をコメントすることができる。
spring bootではプログラムの内容がアノテーションによってかなり左右される。

・メモリ管理
コンピュータのメモリを管理するもの。
単純化すれば、プログラム(プロセスなど)の要求に応じてメモリの一部を割り当てる方法と、そのメモリが不要となった時に
再利用のために開放する方法を提供する。

・ヒープ
OSやアプリケーションソフトが使用するメモリ領域の一種。
用途に関係なく自由に確保することができる。OＳからはヒープメモリを確保した位置のアドレスが渡され、アプリケーション
ソフトはこの値をもとにして確保したヒープ領域を使用する。ヒープメモリはアプリケーション側での自由度が高い反面、
ガベージコレクション機能がないプログラミング言語（の処理系）では、確保したヒープをすべて手作業で開放しなければならない
為、誤開放や解法漏れなどのミスが起こりやすい。このヒープの解法漏れが「メモリリーク」であるらしい。

・GC
ガベージコレクション。コンピュータプログラムの実行環境などが備える機能の一つで、実行中のプログラムが占有していたメモリ
領域のうち不要になったものを自動的に開放し、空き領域として再利用できるようにするもの。

・GoF
Gang of Four(ギャング・オブ・フォー)。
エーリヒ・ガンマ、
リチャード・ヘルム、
ラルフ・ジョンソン、
ジョン・ブリシディース
の四人の事。
『オブジェクト指向における再利用のためのデザインパターン』の著者。
デザインパターンという言葉を初めてソフトウェア開発に導入した。
彼らはその書籍の中で23種類のパターンを取り上げた。

・デザインパターン
よく使われる設計を一般化された形でまとめたもの。
過去のソフトウェア設計者が発見し編み出した設計ノウハウを蓄積し、
名前をつけ、再利用しやすいように特定の規約に従ってカタログ化したもの

■ その他

・オブジェクト指向
ソフトウェア開発時のプログラム記述における考え方。
プログラムを現実世界のようにそれぞれの役割に当てはめてかんがえることによって、可読性が確保されたコードを
記述することができるようになる。そのほかにも、部品ごとの流用性が高く様々な利点がある。

・バッチ処理
一定量のデータを集め、一括処理するための処理方法。
リアルタイム処理はリアルタイムに情報処理を行っていく方式なので用途としては逆である。
売上管理など、直ぐに反映される必要がないような作業はコンピュータの負担の観点から見てもバッチ処理が適している
と言っていいだろう。

・コンパイル
C系,Javaなどの言語に必要な作業
プログラミング言語で記述されたソフトウェアの設計図をコンピュータが実行可能な形式に変換する作業の事。
プログラマによって記述されたソースコードは、、人間が読んで理解できるテキスト形式となっている。
インタプリタとの違いは、コンパイラはすべて機械語に翻訳してから実行する処理方式であること。
その性質により、ひとまとまりが完成していなければ動かすことができない。
しかし、プログラムの実行速度が速いのが特徴である。
機械語に一度すべて翻訳してから実行するため、インタプリタ型言語に比べて効率よく実行することができる。
大規模なシステムの場合は大量のデータを高速に処理することが必要とされるため、コンパイラ型言語が重宝される。

・インタプリタ
JS,Python,Ruby,PHPなどの言語に必要な作業。
コードを一行ずつ機械語に翻訳する。まりプログラムの実行を随時行うことができるので、デバッグを柔軟に行うこと
ができる。そのためコンパイラ型言語に比べて楽に(効率よく)デバッグを行うことができる。

・カバレッジ
所定の網羅条件がテストによってどれだけ実行されたを割合で表したもの。網羅条件が命令であれば、命令網羅と
呼ばれ、すべての実行可能な命令のうち、テストで実行された命令の割りたいを意味する。

・プラットホーム
コンピュータにおいては、ソフトウェアがg動作するための土台(基盤)として機能する。
例えばアプリケーションやソフトウェアにとってのオペレーションシステム(ＯＳ)、
またＯＳにとっての、ＣＰＵをはじめとするハードウェア、といったものを指す。